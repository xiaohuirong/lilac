diff --git a/CMakeLists.txt b/CMakeLists.txt
index 915e975..506b4b2 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,7 +3,10 @@ cmake_minimum_required(VERSION 3.10)
 set(LIB_NAME Framework)
 
 # Force static library.
-add_library(${LIB_NAME} STATIC)
+add_library(${LIB_NAME} SHARED)
+
+find_package(CubismCore REQUIRED)
+find_package(Qt5 COMPONENTS OpenGL REQUIRED)
 
 add_subdirectory(src)
 
@@ -22,10 +25,18 @@ target_include_directories(${LIB_NAME}
 # Add core include.
 target_include_directories(${LIB_NAME}
   PRIVATE
-    ${CMAKE_CURRENT_SOURCE_DIR}/../Core/include
+  ${CubismCore_INCLUDE_DIRS}
+  Qt5::OpenGL
 )
 # Add definitions.
 target_compile_definitions(${LIB_NAME}
   PRIVATE
     ${FRAMEWORK_DEFINITIOINS}
 )
+
+# Link the required libraries.
+target_link_libraries(${LIB_NAME}
+  PRIVATE
+    Qt5::OpenGL
+    ${CubismCore_LIBRARIES}      # Link CubismCore libraries
+)
diff --git a/src/Rendering/OpenGL/CMakeLists.txt b/src/Rendering/OpenGL/CMakeLists.txt
index 03c9296..1138fe5 100644
--- a/src/Rendering/OpenGL/CMakeLists.txt
+++ b/src/Rendering/OpenGL/CMakeLists.txt
@@ -6,4 +6,5 @@ target_sources(${LIB_NAME}
     ${CMAKE_CURRENT_SOURCE_DIR}/CubismShader_OpenGLES2.hpp
     ${CMAKE_CURRENT_SOURCE_DIR}/CubismRenderer_OpenGLES2.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/CubismRenderer_OpenGLES2.hpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/openglhelper.hpp
 )
diff --git a/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.cpp b/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.cpp
index 67ae209..2a94d62 100644
--- a/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.cpp
+++ b/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.cpp
@@ -39,7 +39,7 @@ void CubismOffscreenSurface_OpenGLES2::BeginDraw(GLint restoreFBO)
     }
 
     // マスク用RenderTextureをactiveにセット
-    glBindFramebuffer(GL_FRAMEBUFFER, _renderTexture);
+    OpenGLHelper::get()->glBindFramebuffer(GL_FRAMEBUFFER, _renderTexture);
 }
 
 void CubismOffscreenSurface_OpenGLES2::EndDraw()
@@ -50,7 +50,7 @@ void CubismOffscreenSurface_OpenGLES2::EndDraw()
     }
 
     // 描画対象を戻す
-    glBindFramebuffer(GL_FRAMEBUFFER, _oldFBO);
+    OpenGLHelper::get()->glBindFramebuffer(GL_FRAMEBUFFER, _oldFBO);
 }
 
 void CubismOffscreenSurface_OpenGLES2::Clear(float r, float g, float b, float a)
@@ -94,10 +94,10 @@ csmBool CubismOffscreenSurface_OpenGLES2::CreateOffscreenSurface(csmUint32 displ
         GLint tmpFramebufferObject;
         glGetIntegerv(GL_FRAMEBUFFER_BINDING, &tmpFramebufferObject);
 
-        glGenFramebuffers(1, &ret);
-        glBindFramebuffer(GL_FRAMEBUFFER, ret);
-        glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, _colorBuffer, 0);
-        glBindFramebuffer(GL_FRAMEBUFFER, tmpFramebufferObject);
+        OpenGLHelper::get()->glGenFramebuffers(1, &ret);
+        OpenGLHelper::get()->glBindFramebuffer(GL_FRAMEBUFFER, ret);
+        OpenGLHelper::get()->glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, _colorBuffer, 0);
+        OpenGLHelper::get()->glBindFramebuffer(GL_FRAMEBUFFER, tmpFramebufferObject);
 
         _renderTexture = ret;
 
@@ -125,7 +125,7 @@ void CubismOffscreenSurface_OpenGLES2::DestroyOffscreenSurface()
 
     if (_renderTexture!=0)
     {
-        glDeleteFramebuffers(1, &_renderTexture);
+        OpenGLHelper::get()->glDeleteFramebuffers(1, &_renderTexture);
         _renderTexture = 0;
     }
 }
diff --git a/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp b/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp
index 83c3879..f257ac9 100644
--- a/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp
+++ b/src/Rendering/OpenGL/CubismOffscreenSurface_OpenGLES2.hpp
@@ -12,6 +12,7 @@
 #include "Type/csmRectF.hpp"
 #include "Type/csmMap.hpp"
 #include <float.h>
+#include "openglhelper.hpp"
 
 #ifdef CSM_TARGET_ANDROID_ES2
 #include <jni.h>
@@ -26,8 +27,9 @@
 #endif
 
 #if defined(CSM_TARGET_WIN_GL) || defined(CSM_TARGET_LINUX_GL)
-#include <GL/glew.h>
-#include <GL/gl.h>
+//#include <GL/glew.h>
+//#include <GL/gl.h>
+#include <QOpenGLFunctions>
 #endif
 
 #ifdef CSM_TARGET_MAC_GL
diff --git a/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.cpp b/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.cpp
index e608f64..e006360 100644
--- a/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.cpp
+++ b/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.cpp
@@ -191,8 +191,8 @@ void CubismRendererProfile_OpenGLES2::SetGlEnable(GLenum index, GLboolean enable
 
 void CubismRendererProfile_OpenGLES2::SetGlEnableVertexAttribArray(GLuint index, GLint enabled)
 {
-    if (enabled) glEnableVertexAttribArray(index);
-    else glDisableVertexAttribArray(index);
+    if (enabled) OpenGLHelper::get()->glEnableVertexAttribArray(index);
+    else OpenGLHelper::get()->glDisableVertexAttribArray(index);
 }
 
 void CubismRendererProfile_OpenGLES2::Save()
@@ -209,10 +209,10 @@ void CubismRendererProfile_OpenGLES2::Save()
     glActiveTexture(GL_TEXTURE0); //テクスチャユニット0をアクティブに（以後の設定対象とする）
     glGetIntegerv(GL_TEXTURE_BINDING_2D, &_lastTexture0Binding2D);
 
-    glGetVertexAttribiv(0, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[0]);
-    glGetVertexAttribiv(1, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[1]);
-    glGetVertexAttribiv(2, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[2]);
-    glGetVertexAttribiv(3, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[3]);
+    OpenGLHelper::get()->glGetVertexAttribiv(0, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[0]);
+    OpenGLHelper::get()->glGetVertexAttribiv(1, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[1]);
+    OpenGLHelper::get()->glGetVertexAttribiv(2, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[2]);
+    OpenGLHelper::get()->glGetVertexAttribiv(3, GL_VERTEX_ATTRIB_ARRAY_ENABLED, &_lastVertexAttribArrayEnabled[3]);
 
     _lastScissorTest = glIsEnabled(GL_SCISSOR_TEST);
     _lastStencilTest = glIsEnabled(GL_STENCIL_TEST);
@@ -238,7 +238,7 @@ void CubismRendererProfile_OpenGLES2::Save()
 
 void CubismRendererProfile_OpenGLES2::Restore()
 {
-    glUseProgram(_lastProgram);
+    OpenGLHelper::get()->glUseProgram(_lastProgram);
 
     SetGlEnableVertexAttribArray(0, _lastVertexAttribArrayEnabled[0]);
     SetGlEnableVertexAttribArray(1, _lastVertexAttribArrayEnabled[1]);
@@ -255,8 +255,8 @@ void CubismRendererProfile_OpenGLES2::Restore()
 
     glColorMask(_lastColorMask[0], _lastColorMask[1], _lastColorMask[2], _lastColorMask[3]);
 
-    glBindBuffer(GL_ARRAY_BUFFER, _lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある
-    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _lastElementArrayBufferBinding);
+    OpenGLHelper::get()->glBindBuffer(GL_ARRAY_BUFFER, _lastArrayBufferBinding); //前にバッファがバインドされていたら破棄する必要がある
+    OpenGLHelper::get()->glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, _lastElementArrayBufferBinding);
 
     glActiveTexture(GL_TEXTURE1); //テクスチャユニット1を復元
     glBindTexture(GL_TEXTURE_2D, _lastTexture1Binding2D);
@@ -267,7 +267,7 @@ void CubismRendererProfile_OpenGLES2::Restore()
     glActiveTexture(_lastActiveTexture);
 
     // restore blending
-    glBlendFuncSeparate(_lastBlending[0], _lastBlending[1], _lastBlending[2], _lastBlending[3]);
+    OpenGLHelper::get()->glBlendFuncSeparate(_lastBlending[0], _lastBlending[1], _lastBlending[2], _lastBlending[3]);
 }
 
 /*********************************************************************************************************************
@@ -515,8 +515,8 @@ void CubismRenderer_OpenGLES2::PreDraw()
     glBindVertexArrayOES(0);
 #endif
 
-    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
-    glBindBuffer(GL_ARRAY_BUFFER, 0); //前にバッファがバインドされていたら破棄する必要がある
+    OpenGLHelper::get()->glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
+    OpenGLHelper::get()->glBindBuffer(GL_ARRAY_BUFFER, 0); //前にバッファがバインドされていたら破棄する必要がある
 
     //異方性フィルタリング。プラットフォームのOpenGLによっては未対応の場合があるので、未設定のときは設定しない
     if (GetAnisotropy() > 0.0f)
@@ -689,7 +689,7 @@ void CubismRenderer_OpenGLES2::DrawMeshOpenGL(const CubismModel& model, const cs
     }
 
     // 後処理
-    glUseProgram(0);
+    OpenGLHelper::get()->glUseProgram(0);
     SetClippingContextBufferForDraw(NULL);
     SetClippingContextBufferForMask(NULL);
 }
diff --git a/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.hpp b/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.hpp
index 421e13c..e62fef0 100644
--- a/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.hpp
+++ b/src/Rendering/OpenGL/CubismRenderer_OpenGLES2.hpp
@@ -16,6 +16,7 @@
 #include "Type/csmRectF.hpp"
 #include "Math/CubismVector2.hpp"
 #include "Type/csmMap.hpp"
+#include "openglhelper.hpp"
 
 #ifdef CSM_TARGET_ANDROID_ES2
 #include <jni.h>
@@ -30,8 +31,9 @@
 #endif
 
 #if defined(CSM_TARGET_WIN_GL) || defined(CSM_TARGET_LINUX_GL)
-#include <GL/glew.h>
-#include <GL/gl.h>
+//#include <GL/glew.h>
+//#include <GL/gl.h>
+#include <QOpenGLFunctions>
 #endif
 
 #ifdef CSM_TARGET_MAC_GL
diff --git a/src/Rendering/OpenGL/CubismShader_OpenGLES2.cpp b/src/Rendering/OpenGL/CubismShader_OpenGLES2.cpp
index f97eca0..7474091 100644
--- a/src/Rendering/OpenGL/CubismShader_OpenGLES2.cpp
+++ b/src/Rendering/OpenGL/CubismShader_OpenGLES2.cpp
@@ -466,7 +466,7 @@ void CubismShader_OpenGLES2::ReleaseShaderProgram()
     {
         if (_shaderSets[i]->ShaderProgram)
         {
-            glDeleteProgram(_shaderSets[i]->ShaderProgram);
+            OpenGLHelper::get()->glDeleteProgram(_shaderSets[i]->ShaderProgram);
             _shaderSets[i]->ShaderProgram = 0;
             CSM_DELETE(_shaderSets[i]);
         }
@@ -584,212 +584,212 @@ void CubismShader_OpenGLES2::GenerateShaders()
 #endif
 
     // SetupMask
-    _shaderSets[0]->AttributePositionLocation = glGetAttribLocation(_shaderSets[0]->ShaderProgram, "a_position");
-    _shaderSets[0]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[0]->ShaderProgram, "a_texCoord");
-    _shaderSets[0]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "s_texture0");
-    _shaderSets[0]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[0]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_channelFlag");
-    _shaderSets[0]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_baseColor");
-    _shaderSets[0]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[0]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_screenColor");
+    _shaderSets[0]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[0]->ShaderProgram, "a_position");
+    _shaderSets[0]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[0]->ShaderProgram, "a_texCoord");
+    _shaderSets[0]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "s_texture0");
+    _shaderSets[0]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[0]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_channelFlag");
+    _shaderSets[0]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_baseColor");
+    _shaderSets[0]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[0]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[0]->ShaderProgram, "u_screenColor");
 
     // 通常
-    _shaderSets[1]->AttributePositionLocation = glGetAttribLocation(_shaderSets[1]->ShaderProgram, "a_position");
-    _shaderSets[1]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[1]->ShaderProgram, "a_texCoord");
-    _shaderSets[1]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[1]->ShaderProgram, "s_texture0");
-    _shaderSets[1]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_matrix");
-    _shaderSets[1]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_baseColor");
-    _shaderSets[1]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[1]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_screenColor");
+    _shaderSets[1]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[1]->ShaderProgram, "a_position");
+    _shaderSets[1]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[1]->ShaderProgram, "a_texCoord");
+    _shaderSets[1]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[1]->ShaderProgram, "s_texture0");
+    _shaderSets[1]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_matrix");
+    _shaderSets[1]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_baseColor");
+    _shaderSets[1]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[1]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[1]->ShaderProgram, "u_screenColor");
 
     // 通常（クリッピング）
-    _shaderSets[2]->AttributePositionLocation = glGetAttribLocation(_shaderSets[2]->ShaderProgram, "a_position");
-    _shaderSets[2]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[2]->ShaderProgram, "a_texCoord");
-    _shaderSets[2]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "s_texture0");
-    _shaderSets[2]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "s_texture1");
-    _shaderSets[2]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_matrix");
-    _shaderSets[2]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[2]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_channelFlag");
-    _shaderSets[2]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_baseColor");
-    _shaderSets[2]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[2]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_screenColor");
+    _shaderSets[2]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[2]->ShaderProgram, "a_position");
+    _shaderSets[2]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[2]->ShaderProgram, "a_texCoord");
+    _shaderSets[2]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "s_texture0");
+    _shaderSets[2]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "s_texture1");
+    _shaderSets[2]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_matrix");
+    _shaderSets[2]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[2]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_channelFlag");
+    _shaderSets[2]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_baseColor");
+    _shaderSets[2]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[2]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[2]->ShaderProgram, "u_screenColor");
 
     // 通常（クリッピング・反転）
-    _shaderSets[3]->AttributePositionLocation = glGetAttribLocation(_shaderSets[3]->ShaderProgram, "a_position");
-    _shaderSets[3]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[3]->ShaderProgram, "a_texCoord");
-    _shaderSets[3]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "s_texture0");
-    _shaderSets[3]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "s_texture1");
-    _shaderSets[3]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_matrix");
-    _shaderSets[3]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[3]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_channelFlag");
-    _shaderSets[3]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_baseColor");
-    _shaderSets[3]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[3]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_screenColor");
+    _shaderSets[3]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[3]->ShaderProgram, "a_position");
+    _shaderSets[3]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[3]->ShaderProgram, "a_texCoord");
+    _shaderSets[3]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "s_texture0");
+    _shaderSets[3]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "s_texture1");
+    _shaderSets[3]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_matrix");
+    _shaderSets[3]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[3]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_channelFlag");
+    _shaderSets[3]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_baseColor");
+    _shaderSets[3]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[3]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[3]->ShaderProgram, "u_screenColor");
 
     // 通常（PremultipliedAlpha）
-    _shaderSets[4]->AttributePositionLocation = glGetAttribLocation(_shaderSets[4]->ShaderProgram, "a_position");
-    _shaderSets[4]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[4]->ShaderProgram, "a_texCoord");
-    _shaderSets[4]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[4]->ShaderProgram, "s_texture0");
-    _shaderSets[4]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_matrix");
-    _shaderSets[4]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_baseColor");
-    _shaderSets[4]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[4]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_screenColor");
+    _shaderSets[4]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[4]->ShaderProgram, "a_position");
+    _shaderSets[4]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[4]->ShaderProgram, "a_texCoord");
+    _shaderSets[4]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[4]->ShaderProgram, "s_texture0");
+    _shaderSets[4]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_matrix");
+    _shaderSets[4]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_baseColor");
+    _shaderSets[4]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[4]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[4]->ShaderProgram, "u_screenColor");
 
     // 通常（クリッピング、PremultipliedAlpha）
-    _shaderSets[5]->AttributePositionLocation = glGetAttribLocation(_shaderSets[5]->ShaderProgram, "a_position");
-    _shaderSets[5]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[5]->ShaderProgram, "a_texCoord");
-    _shaderSets[5]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "s_texture0");
-    _shaderSets[5]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "s_texture1");
-    _shaderSets[5]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_matrix");
-    _shaderSets[5]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[5]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_channelFlag");
-    _shaderSets[5]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_baseColor");
-    _shaderSets[5]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[5]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_screenColor");
+    _shaderSets[5]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[5]->ShaderProgram, "a_position");
+    _shaderSets[5]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[5]->ShaderProgram, "a_texCoord");
+    _shaderSets[5]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "s_texture0");
+    _shaderSets[5]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "s_texture1");
+    _shaderSets[5]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_matrix");
+    _shaderSets[5]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[5]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_channelFlag");
+    _shaderSets[5]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_baseColor");
+    _shaderSets[5]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[5]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[5]->ShaderProgram, "u_screenColor");
 
     // 通常（クリッピング・反転、PremultipliedAlpha）
-    _shaderSets[6]->AttributePositionLocation = glGetAttribLocation(_shaderSets[6]->ShaderProgram, "a_position");
-    _shaderSets[6]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[6]->ShaderProgram, "a_texCoord");
-    _shaderSets[6]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "s_texture0");
-    _shaderSets[6]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "s_texture1");
-    _shaderSets[6]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_matrix");
-    _shaderSets[6]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[6]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_channelFlag");
-    _shaderSets[6]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_baseColor");
-    _shaderSets[6]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[6]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_screenColor");
+    _shaderSets[6]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[6]->ShaderProgram, "a_position");
+    _shaderSets[6]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[6]->ShaderProgram, "a_texCoord");
+    _shaderSets[6]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "s_texture0");
+    _shaderSets[6]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "s_texture1");
+    _shaderSets[6]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_matrix");
+    _shaderSets[6]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[6]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_channelFlag");
+    _shaderSets[6]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_baseColor");
+    _shaderSets[6]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[6]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[6]->ShaderProgram, "u_screenColor");
 
     // 加算
-    _shaderSets[7]->AttributePositionLocation = glGetAttribLocation(_shaderSets[7]->ShaderProgram, "a_position");
-    _shaderSets[7]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[7]->ShaderProgram, "a_texCoord");
-    _shaderSets[7]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[7]->ShaderProgram, "s_texture0");
-    _shaderSets[7]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_matrix");
-    _shaderSets[7]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_baseColor");
-    _shaderSets[7]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[7]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_screenColor");
+    _shaderSets[7]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[7]->ShaderProgram, "a_position");
+    _shaderSets[7]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[7]->ShaderProgram, "a_texCoord");
+    _shaderSets[7]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[7]->ShaderProgram, "s_texture0");
+    _shaderSets[7]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_matrix");
+    _shaderSets[7]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_baseColor");
+    _shaderSets[7]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[7]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[7]->ShaderProgram, "u_screenColor");
 
     // 加算（クリッピング）
-    _shaderSets[8]->AttributePositionLocation = glGetAttribLocation(_shaderSets[8]->ShaderProgram, "a_position");
-    _shaderSets[8]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[8]->ShaderProgram, "a_texCoord");
-    _shaderSets[8]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "s_texture0");
-    _shaderSets[8]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "s_texture1");
-    _shaderSets[8]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_matrix");
-    _shaderSets[8]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[8]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_channelFlag");
-    _shaderSets[8]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_baseColor");
-    _shaderSets[8]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[8]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_screenColor");
+    _shaderSets[8]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[8]->ShaderProgram, "a_position");
+    _shaderSets[8]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[8]->ShaderProgram, "a_texCoord");
+    _shaderSets[8]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "s_texture0");
+    _shaderSets[8]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "s_texture1");
+    _shaderSets[8]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_matrix");
+    _shaderSets[8]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[8]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_channelFlag");
+    _shaderSets[8]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_baseColor");
+    _shaderSets[8]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[8]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[8]->ShaderProgram, "u_screenColor");
 
     // 加算（クリッピング・反転）
-    _shaderSets[9]->AttributePositionLocation = glGetAttribLocation(_shaderSets[9]->ShaderProgram, "a_position");
-    _shaderSets[9]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[9]->ShaderProgram, "a_texCoord");
-    _shaderSets[9]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "s_texture0");
-    _shaderSets[9]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "s_texture1");
-    _shaderSets[9]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_matrix");
-    _shaderSets[9]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[9]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_channelFlag");
-    _shaderSets[9]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_baseColor");
-    _shaderSets[9]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[9]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_screenColor");
+    _shaderSets[9]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[9]->ShaderProgram, "a_position");
+    _shaderSets[9]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[9]->ShaderProgram, "a_texCoord");
+    _shaderSets[9]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "s_texture0");
+    _shaderSets[9]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "s_texture1");
+    _shaderSets[9]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_matrix");
+    _shaderSets[9]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[9]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_channelFlag");
+    _shaderSets[9]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_baseColor");
+    _shaderSets[9]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[9]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[9]->ShaderProgram, "u_screenColor");
 
     // 加算（PremultipliedAlpha）
-    _shaderSets[10]->AttributePositionLocation = glGetAttribLocation(_shaderSets[10]->ShaderProgram, "a_position");
-    _shaderSets[10]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[10]->ShaderProgram, "a_texCoord");
-    _shaderSets[10]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[10]->ShaderProgram, "s_texture0");
-    _shaderSets[10]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_matrix");
-    _shaderSets[10]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_baseColor");
-    _shaderSets[10]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[10]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_screenColor");
+    _shaderSets[10]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[10]->ShaderProgram, "a_position");
+    _shaderSets[10]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[10]->ShaderProgram, "a_texCoord");
+    _shaderSets[10]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[10]->ShaderProgram, "s_texture0");
+    _shaderSets[10]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_matrix");
+    _shaderSets[10]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_baseColor");
+    _shaderSets[10]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[10]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[10]->ShaderProgram, "u_screenColor");
 
     // 加算（クリッピング、PremultipliedAlpha）
-    _shaderSets[11]->AttributePositionLocation = glGetAttribLocation(_shaderSets[11]->ShaderProgram, "a_position");
-    _shaderSets[11]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[11]->ShaderProgram, "a_texCoord");
-    _shaderSets[11]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "s_texture0");
-    _shaderSets[11]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "s_texture1");
-    _shaderSets[11]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_matrix");
-    _shaderSets[11]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[11]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_channelFlag");
-    _shaderSets[11]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_baseColor");
-    _shaderSets[11]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[11]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_screenColor");
+    _shaderSets[11]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[11]->ShaderProgram, "a_position");
+    _shaderSets[11]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[11]->ShaderProgram, "a_texCoord");
+    _shaderSets[11]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "s_texture0");
+    _shaderSets[11]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "s_texture1");
+    _shaderSets[11]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_matrix");
+    _shaderSets[11]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[11]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_channelFlag");
+    _shaderSets[11]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_baseColor");
+    _shaderSets[11]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[11]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[11]->ShaderProgram, "u_screenColor");
 
     // 加算（クリッピング・反転、PremultipliedAlpha）
-    _shaderSets[12]->AttributePositionLocation = glGetAttribLocation(_shaderSets[12]->ShaderProgram, "a_position");
-    _shaderSets[12]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[12]->ShaderProgram, "a_texCoord");
-    _shaderSets[12]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "s_texture0");
-    _shaderSets[12]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "s_texture1");
-    _shaderSets[12]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_matrix");
-    _shaderSets[12]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[12]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_channelFlag");
-    _shaderSets[12]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_baseColor");
-    _shaderSets[12]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[12]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_screenColor");
+    _shaderSets[12]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[12]->ShaderProgram, "a_position");
+    _shaderSets[12]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[12]->ShaderProgram, "a_texCoord");
+    _shaderSets[12]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "s_texture0");
+    _shaderSets[12]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "s_texture1");
+    _shaderSets[12]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_matrix");
+    _shaderSets[12]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[12]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_channelFlag");
+    _shaderSets[12]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_baseColor");
+    _shaderSets[12]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[12]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[12]->ShaderProgram, "u_screenColor");
 
     // 乗算
-    _shaderSets[13]->AttributePositionLocation = glGetAttribLocation(_shaderSets[13]->ShaderProgram, "a_position");
-    _shaderSets[13]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[13]->ShaderProgram, "a_texCoord");
-    _shaderSets[13]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[13]->ShaderProgram, "s_texture0");
-    _shaderSets[13]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_matrix");
-    _shaderSets[13]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_baseColor");
-    _shaderSets[13]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[13]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_screenColor");
+    _shaderSets[13]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[13]->ShaderProgram, "a_position");
+    _shaderSets[13]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[13]->ShaderProgram, "a_texCoord");
+    _shaderSets[13]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[13]->ShaderProgram, "s_texture0");
+    _shaderSets[13]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_matrix");
+    _shaderSets[13]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_baseColor");
+    _shaderSets[13]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[13]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[13]->ShaderProgram, "u_screenColor");
 
     // 乗算（クリッピング）
-    _shaderSets[14]->AttributePositionLocation = glGetAttribLocation(_shaderSets[14]->ShaderProgram, "a_position");
-    _shaderSets[14]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[14]->ShaderProgram, "a_texCoord");
-    _shaderSets[14]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "s_texture0");
-    _shaderSets[14]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "s_texture1");
-    _shaderSets[14]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_matrix");
-    _shaderSets[14]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[14]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_channelFlag");
-    _shaderSets[14]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_baseColor");
-    _shaderSets[14]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[14]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_screenColor");
+    _shaderSets[14]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[14]->ShaderProgram, "a_position");
+    _shaderSets[14]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[14]->ShaderProgram, "a_texCoord");
+    _shaderSets[14]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "s_texture0");
+    _shaderSets[14]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "s_texture1");
+    _shaderSets[14]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_matrix");
+    _shaderSets[14]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[14]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_channelFlag");
+    _shaderSets[14]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_baseColor");
+    _shaderSets[14]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[14]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[14]->ShaderProgram, "u_screenColor");
 
     // 乗算（クリッピング・反転）
-    _shaderSets[15]->AttributePositionLocation = glGetAttribLocation(_shaderSets[15]->ShaderProgram, "a_position");
-    _shaderSets[15]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[15]->ShaderProgram, "a_texCoord");
-    _shaderSets[15]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "s_texture0");
-    _shaderSets[15]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "s_texture1");
-    _shaderSets[15]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_matrix");
-    _shaderSets[15]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[15]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_channelFlag");
-    _shaderSets[15]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_baseColor");
-    _shaderSets[15]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[15]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_screenColor");
+    _shaderSets[15]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[15]->ShaderProgram, "a_position");
+    _shaderSets[15]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[15]->ShaderProgram, "a_texCoord");
+    _shaderSets[15]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "s_texture0");
+    _shaderSets[15]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "s_texture1");
+    _shaderSets[15]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_matrix");
+    _shaderSets[15]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[15]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_channelFlag");
+    _shaderSets[15]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_baseColor");
+    _shaderSets[15]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[15]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[15]->ShaderProgram, "u_screenColor");
 
     // 乗算（PremultipliedAlpha）
-    _shaderSets[16]->AttributePositionLocation = glGetAttribLocation(_shaderSets[16]->ShaderProgram, "a_position");
-    _shaderSets[16]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[16]->ShaderProgram, "a_texCoord");
-    _shaderSets[16]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[16]->ShaderProgram, "s_texture0");
-    _shaderSets[16]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_matrix");
-    _shaderSets[16]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_baseColor");
-    _shaderSets[16]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[16]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_screenColor");
+    _shaderSets[16]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[16]->ShaderProgram, "a_position");
+    _shaderSets[16]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[16]->ShaderProgram, "a_texCoord");
+    _shaderSets[16]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[16]->ShaderProgram, "s_texture0");
+    _shaderSets[16]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_matrix");
+    _shaderSets[16]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_baseColor");
+    _shaderSets[16]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[16]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[16]->ShaderProgram, "u_screenColor");
 
     // 乗算（クリッピング、PremultipliedAlpha）
-    _shaderSets[17]->AttributePositionLocation = glGetAttribLocation(_shaderSets[17]->ShaderProgram, "a_position");
-    _shaderSets[17]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[17]->ShaderProgram, "a_texCoord");
-    _shaderSets[17]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "s_texture0");
-    _shaderSets[17]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "s_texture1");
-    _shaderSets[17]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_matrix");
-    _shaderSets[17]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[17]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_channelFlag");
-    _shaderSets[17]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_baseColor");
-    _shaderSets[17]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[17]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_screenColor");
+    _shaderSets[17]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[17]->ShaderProgram, "a_position");
+    _shaderSets[17]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[17]->ShaderProgram, "a_texCoord");
+    _shaderSets[17]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "s_texture0");
+    _shaderSets[17]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "s_texture1");
+    _shaderSets[17]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_matrix");
+    _shaderSets[17]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[17]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_channelFlag");
+    _shaderSets[17]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_baseColor");
+    _shaderSets[17]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[17]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[17]->ShaderProgram, "u_screenColor");
 
     // 乗算（クリッピング・反転、PremultipliedAlpha）
-    _shaderSets[18]->AttributePositionLocation = glGetAttribLocation(_shaderSets[18]->ShaderProgram, "a_position");
-    _shaderSets[18]->AttributeTexCoordLocation = glGetAttribLocation(_shaderSets[18]->ShaderProgram, "a_texCoord");
-    _shaderSets[18]->SamplerTexture0Location = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "s_texture0");
-    _shaderSets[18]->SamplerTexture1Location = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "s_texture1");
-    _shaderSets[18]->UniformMatrixLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_matrix");
-    _shaderSets[18]->UniformClipMatrixLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_clipMatrix");
-    _shaderSets[18]->UnifromChannelFlagLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_channelFlag");
-    _shaderSets[18]->UniformBaseColorLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_baseColor");
-    _shaderSets[18]->UniformMultiplyColorLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_multiplyColor");
-    _shaderSets[18]->UniformScreenColorLocation = glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_screenColor");
+    _shaderSets[18]->AttributePositionLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[18]->ShaderProgram, "a_position");
+    _shaderSets[18]->AttributeTexCoordLocation = OpenGLHelper::get()->glGetAttribLocation(_shaderSets[18]->ShaderProgram, "a_texCoord");
+    _shaderSets[18]->SamplerTexture0Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "s_texture0");
+    _shaderSets[18]->SamplerTexture1Location = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "s_texture1");
+    _shaderSets[18]->UniformMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_matrix");
+    _shaderSets[18]->UniformClipMatrixLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_clipMatrix");
+    _shaderSets[18]->UnifromChannelFlagLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_channelFlag");
+    _shaderSets[18]->UniformBaseColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_baseColor");
+    _shaderSets[18]->UniformMultiplyColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_multiplyColor");
+    _shaderSets[18]->UniformScreenColorLocation = OpenGLHelper::get()->glGetUniformLocation(_shaderSets[18]->ShaderProgram, "u_screenColor");
 }
 
 void CubismShader_OpenGLES2::SetupShaderProgramForDraw(CubismRenderer_OpenGLES2* renderer, const CubismModel& model, const csmInt32 index)
@@ -841,7 +841,7 @@ void CubismShader_OpenGLES2::SetupShaderProgramForDraw(CubismRenderer_OpenGLES2*
         break;
     }
 
-    glUseProgram(shaderSet->ShaderProgram);
+    OpenGLHelper::get()->glUseProgram(shaderSet->ShaderProgram);
 
     //テクスチャ設定
     SetupTexture(renderer, model, index, shaderSet);
@@ -857,17 +857,17 @@ void CubismShader_OpenGLES2::SetupShaderProgramForDraw(CubismRenderer_OpenGLES2*
         GLuint tex = renderer->GetMaskBuffer(renderer->GetClippingContextBufferForDraw()->_bufferIndex)->GetColorBuffer();
 
         glBindTexture(GL_TEXTURE_2D, tex);
-        glUniform1i(shaderSet->SamplerTexture1Location, 1);
+        OpenGLHelper::get()->glUniform1i(shaderSet->SamplerTexture1Location, 1);
 
         // View座標をClippingContextの座標に変換するための行列を設定
-        glUniformMatrix4fv(shaderSet->UniformClipMatrixLocation, 1, 0, renderer->GetClippingContextBufferForDraw()->_matrixForDraw.GetArray());
+        OpenGLHelper::get()->glUniformMatrix4fv(shaderSet->UniformClipMatrixLocation, 1, 0, renderer->GetClippingContextBufferForDraw()->_matrixForDraw.GetArray());
 
         // 使用するカラーチャンネルを設定
         SetColorChannelUniformVariables(shaderSet, renderer->GetClippingContextBufferForDraw());
     }
 
     //座標変換
-    glUniformMatrix4fv(shaderSet->UniformMatrixLocation, 1, 0, renderer->GetMvpMatrix().GetArray()); //
+    OpenGLHelper::get()->glUniformMatrix4fv(shaderSet->UniformMatrixLocation, 1, 0, renderer->GetMvpMatrix().GetArray()); //
 
     // ユニフォーム変数設定
     CubismRenderer::CubismTextureColor baseColor = renderer->GetModelColorWithOpacity(model.GetDrawableOpacity(index));
@@ -875,7 +875,7 @@ void CubismShader_OpenGLES2::SetupShaderProgramForDraw(CubismRenderer_OpenGLES2*
     CubismRenderer::CubismTextureColor screenColor = model.GetScreenColor(index);
     SetColorUniformVariables(renderer, model, index, shaderSet, baseColor, multiplyColor, screenColor);
 
-    glBlendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
+    OpenGLHelper::get()->glBlendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
 }
 
 void CubismShader_OpenGLES2::SetupShaderProgramForMask(CubismRenderer_OpenGLES2* renderer, const CubismModel& model, const csmInt32 index)
@@ -892,7 +892,7 @@ void CubismShader_OpenGLES2::SetupShaderProgramForMask(CubismRenderer_OpenGLES2*
     csmInt32 DST_ALPHA = GL_ONE_MINUS_SRC_ALPHA;
 
     CubismShaderSet* shaderSet = _shaderSets[ShaderNames_SetupMask];
-    glUseProgram(shaderSet->ShaderProgram);
+    OpenGLHelper::get()->glUseProgram(shaderSet->ShaderProgram);
 
     //テクスチャ設定
     SetupTexture(renderer, model, index, shaderSet);
@@ -903,7 +903,7 @@ void CubismShader_OpenGLES2::SetupShaderProgramForMask(CubismRenderer_OpenGLES2*
     // 使用するカラーチャンネルを設定
     SetColorChannelUniformVariables(shaderSet, renderer->GetClippingContextBufferForMask());
 
-    glUniformMatrix4fv(shaderSet->UniformClipMatrixLocation, 1, GL_FALSE, renderer->GetClippingContextBufferForMask()->_matrixForMask.GetArray());
+    OpenGLHelper::get()->glUniformMatrix4fv(shaderSet->UniformClipMatrixLocation, 1, GL_FALSE, renderer->GetClippingContextBufferForMask()->_matrixForMask.GetArray());
 
     // ユニフォーム変数設定
     csmRectF* rect = renderer->GetClippingContextBufferForMask()->_layoutBounds;
@@ -912,7 +912,7 @@ void CubismShader_OpenGLES2::SetupShaderProgramForMask(CubismRenderer_OpenGLES2*
     CubismRenderer::CubismTextureColor screenColor = model.GetScreenColor(index);
     SetColorUniformVariables(renderer, model, index, shaderSet, baseColor, multiplyColor, screenColor);
 
-    glBlendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
+    OpenGLHelper::get()->glBlendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);
 }
 
 csmBool CubismShader_OpenGLES2::CompileShaderSource(GLuint* outShader, GLenum shaderType, const csmChar* shaderSource)
@@ -920,24 +920,24 @@ csmBool CubismShader_OpenGLES2::CompileShaderSource(GLuint* outShader, GLenum sh
     GLint status;
     const GLchar* source = shaderSource;
 
-    *outShader = glCreateShader(shaderType);
-    glShaderSource(*outShader, 1, &source, NULL);
-    glCompileShader(*outShader);
+    *outShader = OpenGLHelper::get()->glCreateShader(shaderType);
+    OpenGLHelper::get()->glShaderSource(*outShader, 1, &source, NULL);
+    OpenGLHelper::get()->glCompileShader(*outShader);
 
     GLint logLength;
-    glGetShaderiv(*outShader, GL_INFO_LOG_LENGTH, &logLength);
+    OpenGLHelper::get()->glGetShaderiv(*outShader, GL_INFO_LOG_LENGTH, &logLength);
     if (logLength > 0)
     {
         GLchar* log = reinterpret_cast<GLchar*>(CSM_MALLOC(logLength));
-        glGetShaderInfoLog(*outShader, logLength, &logLength, log);
+        OpenGLHelper::get()->glGetShaderInfoLog(*outShader, logLength, &logLength, log);
         CubismLogError("Shader compile log: %s", log);
         CSM_FREE(log);
     }
 
-    glGetShaderiv(*outShader, GL_COMPILE_STATUS, &status);
+    OpenGLHelper::get()->glGetShaderiv(*outShader, GL_COMPILE_STATUS, &status);
     if (status == GL_FALSE)
     {
-        glDeleteShader(*outShader);
+        OpenGLHelper::get()->glDeleteShader(*outShader);
         return false;
     }
 
@@ -947,19 +947,19 @@ csmBool CubismShader_OpenGLES2::CompileShaderSource(GLuint* outShader, GLenum sh
 csmBool CubismShader_OpenGLES2::LinkProgram(GLuint shaderProgram)
 {
     GLint status;
-    glLinkProgram(shaderProgram);
+    OpenGLHelper::get()->glLinkProgram(shaderProgram);
 
     GLint logLength;
-    glGetProgramiv(shaderProgram, GL_INFO_LOG_LENGTH, &logLength);
+    OpenGLHelper::get()->glGetProgramiv(shaderProgram, GL_INFO_LOG_LENGTH, &logLength);
     if (logLength > 0)
     {
         GLchar* log = reinterpret_cast<GLchar*>(CSM_MALLOC(logLength));
-        glGetProgramInfoLog(shaderProgram, logLength, &logLength, log);
+        OpenGLHelper::get()->glGetProgramInfoLog(shaderProgram, logLength, &logLength, log);
         CubismLogError("Program link log: %s", log);
         CSM_FREE(log);
     }
 
-    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &status);
+    OpenGLHelper::get()->glGetProgramiv(shaderProgram, GL_LINK_STATUS, &status);
     if (status == GL_FALSE)
     {
         return false;
@@ -972,17 +972,17 @@ csmBool CubismShader_OpenGLES2::ValidateProgram(GLuint shaderProgram)
 {
     GLint logLength, status;
 
-    glValidateProgram(shaderProgram);
-    glGetProgramiv(shaderProgram, GL_INFO_LOG_LENGTH, &logLength);
+    OpenGLHelper::get()->glValidateProgram(shaderProgram);
+    OpenGLHelper::get()->glGetProgramiv(shaderProgram, GL_INFO_LOG_LENGTH, &logLength);
     if (logLength > 0)
     {
         GLchar* log = reinterpret_cast<GLchar*>(CSM_MALLOC(logLength));
-        glGetProgramInfoLog(shaderProgram, logLength, &logLength, log);
+        OpenGLHelper::get()->glGetProgramInfoLog(shaderProgram, logLength, &logLength, log);
         CubismLogError("Validate program log: %s", log);
         CSM_FREE(log);
     }
 
-    glGetProgramiv(shaderProgram, GL_VALIDATE_STATUS, &status);
+    OpenGLHelper::get()->glGetProgramiv(shaderProgram, GL_VALIDATE_STATUS, &status);
     if (status == GL_FALSE)
     {
         return false;
@@ -996,7 +996,7 @@ GLuint CubismShader_OpenGLES2::LoadShaderProgram(const csmChar* vertShaderSrc, c
     GLuint vertShader, fragShader;
 
     // Create shader program.
-    GLuint shaderProgram = glCreateProgram();
+    GLuint shaderProgram = OpenGLHelper::get()->glCreateProgram();
 
     if (!CompileShaderSource(&vertShader, GL_VERTEX_SHADER, vertShaderSrc))
     {
@@ -1012,10 +1012,10 @@ GLuint CubismShader_OpenGLES2::LoadShaderProgram(const csmChar* vertShaderSrc, c
     }
 
     // Attach vertex shader to program.
-    glAttachShader(shaderProgram, vertShader);
+    OpenGLHelper::get()->glAttachShader(shaderProgram, vertShader);
 
     // Attach fragment shader to program.
-    glAttachShader(shaderProgram, fragShader);
+    OpenGLHelper::get()->glAttachShader(shaderProgram, fragShader);
 
     // Link program.
     if (!LinkProgram(shaderProgram))
@@ -1024,17 +1024,17 @@ GLuint CubismShader_OpenGLES2::LoadShaderProgram(const csmChar* vertShaderSrc, c
 
         if (vertShader)
         {
-            glDeleteShader(vertShader);
+            OpenGLHelper::get()->glDeleteShader(vertShader);
             vertShader = 0;
         }
         if (fragShader)
         {
-            glDeleteShader(fragShader);
+            OpenGLHelper::get()->glDeleteShader(fragShader);
             fragShader = 0;
         }
         if (shaderProgram)
         {
-            glDeleteProgram(shaderProgram);
+            OpenGLHelper::get()->glDeleteProgram(shaderProgram);
             shaderProgram = 0;
         }
 
@@ -1044,14 +1044,14 @@ GLuint CubismShader_OpenGLES2::LoadShaderProgram(const csmChar* vertShaderSrc, c
     // Release vertex and fragment shaders.
     if (vertShader)
     {
-        glDetachShader(shaderProgram, vertShader);
-        glDeleteShader(vertShader);
+        OpenGLHelper::get()->glDetachShader(shaderProgram, vertShader);
+        OpenGLHelper::get()->glDeleteShader(vertShader);
     }
 
     if (fragShader)
     {
-        glDetachShader(shaderProgram, fragShader);
-        glDeleteShader(fragShader);
+        OpenGLHelper::get()->glDetachShader(shaderProgram, fragShader);
+        OpenGLHelper::get()->glDeleteShader(fragShader);
     }
 
     return shaderProgram;
@@ -1061,13 +1061,13 @@ void CubismShader_OpenGLES2::SetVertexAttributes(const CubismModel& model, const
 {
     // 頂点位置属性の設定
     const csmFloat32* vertexArray = model.GetDrawableVertices(index);
-    glEnableVertexAttribArray(shaderSet->AttributePositionLocation);
-    glVertexAttribPointer(shaderSet->AttributePositionLocation, 2, GL_FLOAT, GL_FALSE, sizeof(csmFloat32) * 2, vertexArray);
+    OpenGLHelper::get()->glEnableVertexAttribArray(shaderSet->AttributePositionLocation);
+    OpenGLHelper::get()->glVertexAttribPointer(shaderSet->AttributePositionLocation, 2, GL_FLOAT, GL_FALSE, sizeof(csmFloat32) * 2, vertexArray);
 
     // テクスチャ座標属性の設定
     const csmFloat32* uvArray = reinterpret_cast<const csmFloat32*>(model.GetDrawableVertexUvs(index));
-    glEnableVertexAttribArray(shaderSet->AttributeTexCoordLocation);
-    glVertexAttribPointer(shaderSet->AttributeTexCoordLocation, 2, GL_FLOAT, GL_FALSE, sizeof(csmFloat32) * 2, uvArray);
+    OpenGLHelper::get()->glEnableVertexAttribArray(shaderSet->AttributeTexCoordLocation);
+    OpenGLHelper::get()->glVertexAttribPointer(shaderSet->AttributeTexCoordLocation, 2, GL_FLOAT, GL_FALSE, sizeof(csmFloat32) * 2, uvArray);
 }
 
 void CubismShader_OpenGLES2::SetupTexture(CubismRenderer_OpenGLES2* renderer, const CubismModel& model, const csmInt32 index, CubismShaderSet* shaderSet)
@@ -1076,22 +1076,22 @@ void CubismShader_OpenGLES2::SetupTexture(CubismRenderer_OpenGLES2* renderer, co
     const GLuint textureId = renderer->GetBindedTextureId(textureIndex);
     glActiveTexture(GL_TEXTURE0);
     glBindTexture(GL_TEXTURE_2D, textureId);
-    glUniform1i(shaderSet->SamplerTexture0Location, 0);
+    OpenGLHelper::get()->glUniform1i(shaderSet->SamplerTexture0Location, 0);
 }
 
 void CubismShader_OpenGLES2::SetColorUniformVariables(CubismRenderer_OpenGLES2* renderer, const CubismModel& model, const csmInt32 index, CubismShaderSet* shaderSet,
                                                       CubismRenderer::CubismTextureColor& baseColor, CubismRenderer::CubismTextureColor& multiplyColor, CubismRenderer::CubismTextureColor& screenColor)
 {
-    glUniform4f(shaderSet->UniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
-    glUniform4f(shaderSet->UniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
-    glUniform4f(shaderSet->UniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
+    OpenGLHelper::get()->glUniform4f(shaderSet->UniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);
+    OpenGLHelper::get()->glUniform4f(shaderSet->UniformMultiplyColorLocation, multiplyColor.R, multiplyColor.G, multiplyColor.B, multiplyColor.A);
+    OpenGLHelper::get()->glUniform4f(shaderSet->UniformScreenColorLocation, screenColor.R, screenColor.G, screenColor.B, screenColor.A);
 }
 
 void CubismShader_OpenGLES2::SetColorChannelUniformVariables(CubismShaderSet* shaderSet, CubismClippingContext_OpenGLES2* contextBuffer)
 {
     const csmInt32 channelIndex = contextBuffer->_layoutChannelIndex;
     CubismRenderer::CubismTextureColor* colorChannel = contextBuffer->GetClippingManager()->GetChannelFlagAsColor(channelIndex);
-    glUniform4f(shaderSet->UnifromChannelFlagLocation, colorChannel->R, colorChannel->G, colorChannel->B, colorChannel->A);
+    OpenGLHelper::get()->glUniform4f(shaderSet->UnifromChannelFlagLocation, colorChannel->R, colorChannel->G, colorChannel->B, colorChannel->A);
 }
 
 }}}}
diff --git a/src/Rendering/OpenGL/CubismShader_OpenGLES2.hpp b/src/Rendering/OpenGL/CubismShader_OpenGLES2.hpp
index 025ba93..41548b4 100644
--- a/src/Rendering/OpenGL/CubismShader_OpenGLES2.hpp
+++ b/src/Rendering/OpenGL/CubismShader_OpenGLES2.hpp
@@ -9,6 +9,7 @@
 
 #include "CubismFramework.hpp"
 #include "CubismRenderer_OpenGLES2.hpp"
+#include "openglhelper.hpp"
 
 #ifdef CSM_TARGET_ANDROID_ES2
 #include <jni.h>
@@ -23,8 +24,9 @@
 #endif
 
 #if defined(CSM_TARGET_WIN_GL) || defined(CSM_TARGET_LINUX_GL)
-#include <GL/glew.h>
-#include <GL/gl.h>
+//#include <GL/glew.h>
+//#include <GL/gl.h>
+#include <QOpenGLFunctions>
 #endif
 
 #ifdef CSM_TARGET_MAC_GL
