diff --git a/src/api/wayfire/output-layout.hpp b/src/api/wayfire/output-layout.hpp
index fa6e83e3..5fde2b1a 100644
--- a/src/api/wayfire/output-layout.hpp
+++ b/src/api/wayfire/output-layout.hpp
@@ -43,6 +43,9 @@ struct output_state_t
     /** Only width, height and refresh fields are used. */
     wlr_output_mode mode;
 
+    /** Whether a custom mode was requested for the output. */
+    bool uses_custom_mode = false;
+
     /* The transform of the output */
     wl_output_transform transform = WL_OUTPUT_TRANSFORM_NORMAL;
     /* The scale of the output */
diff --git a/src/core/output-layout.cpp b/src/core/output-layout.cpp
index cdee8a45..c6521571 100644
--- a/src/core/output-layout.cpp
+++ b/src/core/output-layout.cpp
@@ -56,7 +56,7 @@ static wl_output_transform get_transform_from_string(std::string transform)
 }
 
 wlr_output_mode *find_matching_mode(wlr_output *output,
-    const wlr_output_mode& reference)
+    const wlr_output_mode& reference, bool exact_match = false)
 {
     wlr_output_mode *mode;
     wlr_output_mode *best = NULL;
@@ -69,6 +69,11 @@ wlr_output_mode *find_matching_mode(wlr_output *output,
                 return mode;
             }
 
+            if (exact_match)
+            {
+                continue;
+            }
+
             if (!best || (best->refresh < mode->refresh))
             {
                 best = mode;
@@ -596,7 +601,7 @@ struct output_layout_output_t
     }
 
     /** Change the output mode */
-    void apply_mode(const wlr_output_mode& mode)
+    void apply_mode(const wlr_output_mode& mode, bool custom_mode)
     {
         if (handle->current_mode)
         {
@@ -613,7 +618,7 @@ struct output_layout_output_t
         }
 
         refresh_custom_modes();
-        auto built_in = find_matching_mode(handle, mode);
+        auto built_in = find_matching_mode(handle, mode, custom_mode);
         if (built_in)
         {
             wlr_output_set_mode(handle, built_in);
@@ -851,7 +856,7 @@ struct output_layout_output_t
         }
 
         set_enabled(!(state.source & OUTPUT_IMAGE_SOURCE_NONE));
-        apply_mode(state.mode);
+        apply_mode(state.mode, state.uses_custom_mode);
         if (state.source & OUTPUT_IMAGE_SOURCE_SELF)
         {
             if (handle->transform != state.transform)
@@ -1007,8 +1012,18 @@ class output_layout_t::impl
             }
 
             state.source = OUTPUT_IMAGE_SOURCE_SELF;
-            state.mode   = head->state.mode ? *head->state.mode :
-                this->outputs[handle]->current_state.mode;
+
+            if (head->state.mode)
+            {
+                state.mode = *head->state.mode;
+            } else
+            {
+                state.mode.width = head->state.custom_mode.width;
+                state.mode.height = head->state.custom_mode.height;
+                state.mode.refresh = head->state.custom_mode.refresh;
+                state.uses_custom_mode = true;
+            }
+
             state.position  = {head->state.x, head->state.y};
             state.scale     = head->state.scale;
             state.transform = head->state.transform;
